{"version":3,"file":"static/js/400.aff40b99.chunk.js","mappings":"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","sources":["Components/PageProfile/PageProfile.module.css","webpack://way-samurai-01/./src/Components/PageProfile/ProfileInfo/ProfileInfo.module.css?9d24","Components/PageProfile/ProfileInfo/ProfileStatusWithHooks.tsx","Components/PageProfile/ProfileInfo/ProfileInfo.tsx","webpack://way-samurai-01/./src/Components/PageProfile/MyPosts/Post/Post.module.css?b313","Components/PageProfile/MyPosts/Post/Post.tsx","Components/PageProfile/MyPosts/MyPosts.tsx","Components/PageProfile/MyPosts/MyPostsContainer.tsx","Components/PageProfile/PageProfile.tsx","Components/PageProfile/PageProfileContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {};","// extracted by mini-css-extract-plugin\nexport default {\"wall\":\"ProfileInfo_wall__Auxdm\"};","import React, {ChangeEvent, useEffect, useState} from 'react';\r\n\r\ntype PropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\nexport const ProfileStatusWithHooks = (props: PropsType) => {\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [status, setStatus] = useState<string>(props.status)\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setEditMode(true)\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    const sendNewStatus = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n\r\n    return (!editMode\r\n        ?\r\n        <div style={{minHeight: '20px', width: '200px', backgroundColor: 'lightblue'}}>\r\n            <span onDoubleClick={() => {setEditMode(true)}}>{props.status || '-----'}</span>\r\n        </div>\r\n        :\r\n        <div style={{minHeight: '20px', width: '200px', backgroundColor: 'lightblue'}}>\r\n            <input onChange={onStatusChange}\r\n                   onBlur={() => {sendNewStatus()}}\r\n                   autoFocus type=\"text\"\r\n                   value={status}\r\n            />\r\n        </div>)\r\n\r\n}\r\n\r\n","import React, {FC} from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport {ProfileType} from \"../../../redux/profile-reducer\";\r\nimport DefaultAvatar from '../../../images/cat-avatar.d04271ed.gif'\r\nimport {ProfileStatusWithHooks} from \"./ProfileStatusWithHooks\";\r\n\r\n\r\ntype ProfileInfoPropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\n\r\nconst ProfileInfo: FC<ProfileInfoPropsType> = ({profile, status, updateStatus}) => {\r\n\r\n    return !profile\r\n        ?\r\n        <div className={s.wall}>\r\n            <img src={'https://stoqk.com/wp-content/uploads/2017/03/Sea-Beach-Wallpaper-HD.jpg'}/>\r\n            <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\r\n        </div>\r\n        :\r\n        <>\r\n            <div className={s.wall}>\r\n                <img src={'https://stoqk.com/wp-content/uploads/2017/03/Sea-Beach-Wallpaper-HD.jpg'}/>\r\n            </div>\r\n            <div>\r\n                <div>\r\n                    <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\r\n                </div>\r\n                <img src={profile.photos.small !== null ? profile.photos.small : DefaultAvatar} alt=\"avatar\" width={45}/>\r\n                <div>About Me: {profile.aboutMe}</div>\r\n                <p>Name: {profile.fullName}</p>\r\n            </div>\r\n        </>\r\n\r\n    /*if (!profile) {\r\n        return <div className={s.wall}>\r\n            <img src={'https://stoqk.com/wp-content/uploads/2017/03/Sea-Beach-Wallpaper-HD.jpg'}/>\r\n        </div>\r\n    }\r\n    return (\r\n        <>\r\n            <div className={s.wall}>\r\n                <img src={'https://stoqk.com/wp-content/uploads/2017/03/Sea-Beach-Wallpaper-HD.jpg'}/>\r\n            </div>\r\n            <div>\r\n                <img src={profile.photos.small !== null ? profile.photos.small : DefaultAvatar} alt=\"avatar\" width={45}/>\r\n                <div>About Me: {profile.aboutMe}</div>\r\n                <p>Name: {profile.fullName}</p>\r\n            </div>\r\n        </>\r\n    );*/\r\n};\r\n\r\nexport default ProfileInfo;","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__yxPwy\"};","import React, {FC} from 'react';\r\nimport s from './Post.module.css';\r\n\r\ntype PropsMessageType = {\r\n    message: string\r\n    likeCounts: number\r\n}\r\n\r\nconst Post: FC<PropsMessageType> = ({message, likeCounts}) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img src={'https://images5.alphacoders.com/112/thumb-350-1120452.jpg'}/>\r\n            {message}\r\n            <div>\r\n                <span>{likeCounts}</span>\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n};\r\n\r\nexport default Post;","import React, {FC} from 'react';\r\nimport Post from \"./Post/Post\";\r\nimport {postsDataType} from \"../../../redux/profile-reducer\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, requiredField} from \"../../../ValidationRules/validation\";\r\nimport {Textarea} from \"../../../ValidationRules/ReduxTextarea\";\r\n\r\n\r\ntype myPostsPropsType = {\r\n    addPost: (newPostText: string) => void\r\n    posts: postsDataType[]\r\n}\r\n\r\nexport class MyPosts extends React.PureComponent<myPostsPropsType> {\r\n    render() {\r\n        let {addPost, posts} = this.props;\r\n\r\n        let PostsElements = posts.map(p => <Post key={p.id} message={p.message} likeCounts={p.likesCount}/>);\r\n\r\n        let newPostElement = React.createRef<HTMLTextAreaElement>()\r\n        const onAddPost = (values: FormDataType) => {\r\n\r\n            addPost(values.postBody)\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                My posts\r\n                <FormPostRedux onSubmit={onAddPost}/>\r\n                {/*<div>\r\n                <textarea ref={newPostElement} value={newPostText} onChange={onPostChange}/>\r\n                <button onClick={onAddPost}>Add post</button>\r\n            </div>*/}\r\n                <div className={'posts'}>\r\n                    {PostsElements}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\ntype FormDataType = {\r\n    postBody: string\r\n}\r\n\r\nconst validationMaxLength = maxLengthCreator(30)\r\nconst FormAddPost: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <Field component={Textarea}\r\n                   name={'postBody'}\r\n                   validate={[requiredField, validationMaxLength]}\r\n            />\r\n            <button>Add post</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst FormPostRedux = reduxForm<FormDataType>({form: 'post'})(FormAddPost)","import React from 'react';\r\nimport {MyPosts} from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {addPostAC} from \"../../../redux/profile-reducer\";\r\nimport {AppStateType} from \"../../../redux/store\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        posts: state.profilePage['posts'],\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch: Dispatch) => {\r\n    return {\r\n        addPost: (newPostText: string) => {\r\n            dispatch(addPostAC(newPostText))\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport const MyPostsContainerRR = connect(mapStateToProps, mapDispatchToProps)(MyPosts)","import React from 'react';\r\nimport s from './PageProfile.module.css';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport {MyPostsContainerRR} from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfileType} from \"../../redux/profile-reducer\";\r\n\r\n\r\n\r\ntype PageProfilePropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nconst PageProfile: React.FC<PageProfilePropsType> = ({profile, status, updateStatus}) => {\r\n    return (\r\n        <div className={s.profile}>\r\n            <ProfileInfo profile={profile} status={status} updateStatus={updateStatus}/>\r\n            <MyPostsContainerRR />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PageProfile;","import React, {ComponentType} from 'react';\r\nimport s from './PageProfile.module.css';\r\nimport PageProfile from \"./PageProfile\";\r\nimport {connect} from \"react-redux\";\r\nimport {getStatusThunk, getUserProfile, ProfileType, updateStatusThunk} from \"../../redux/profile-reducer\";\r\nimport {AppStateType} from \"../../redux/store\";\r\nimport {Params, useLocation, useParams} from \"react-router-dom\";\r\nimport {isAuthRedirectHoc} from \"../../HOC/IsAuthRedirectHOC\";\r\nimport {compose} from \"redux\";\r\n\r\n\r\ntype WithRouterType<T extends string> = { location: Location, params: Readonly<Params<T>> }\r\ntype mapStatePropsType = { profile: ProfileType | null, isAuth: boolean, status: string, authorizedUserid: any}\r\ntype mapDispatchPropsType = {\r\n    getUserProfile: (userId: string) => void\r\n    getStatusThunk: (userId: string) => void\r\n    updateStatusThunk: (status: string) => void\r\n}\r\ntype PageProfileContainerPropsType = mapStatePropsType & mapDispatchPropsType\r\n\r\nconst WithRouter = (WrapperComponent: ComponentType<any>) => {\r\n    const WrapperComponentWithRouter = (props: any) => {\r\n        const location = useLocation();\r\n        const params = useParams();\r\n        return (\r\n            <WrapperComponent\r\n                {...props}\r\n                navigation={{\r\n                    location: location,\r\n                    params: params,\r\n                }}\r\n            />\r\n        )\r\n    }\r\n    return WrapperComponentWithRouter\r\n}\r\n\r\n\r\nclass PageProfileContainer extends React.Component<PageProfileContainerPropsType & { navigation: WithRouterType<'userID'> }> {\r\n    componentDidMount() {\r\n        let userID = this.props.navigation.params.userID\r\n        if (!userID) {\r\n            userID = this.props.authorizedUserid\r\n        }\r\n        if (typeof userID === \"string\") {\r\n            this.props.getUserProfile(userID)\r\n        }\r\n        if (typeof userID === \"string\") {\r\n            this.props.getStatusThunk(userID)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return <div className={s.profile}>\r\n                <PageProfile profile={this.props.profile} status={this.props.status} updateStatus={this.props.updateStatusThunk}/>\r\n            </div>\r\n    };\r\n}\r\n\r\n// const WithRouterContainer = WithRouter(PageProfileContainer)\r\n\r\nconst mapStateToProps = (state: AppStateType): mapStatePropsType => ({\r\n    profile: state.profilePage.profile,\r\n    isAuth: state.auth.isAuth,\r\n    status: state.profilePage.status,\r\n    authorizedUserid: state.auth.id,\r\n\r\n})\r\n\r\n// export default isAuthRedirectHoc (connect(mapStateToProps, {getUserProfile})(WithRouterContainer))\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    isAuthRedirectHoc,\r\n    connect(mapStateToProps, {getUserProfile, getStatusThunk, updateStatusThunk}),\r\n    WithRouter\r\n)(PageProfileContainer)\r\n"],"names":["ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","style","minHeight","width","backgroundColor","onChange","e","currentTarget","value","onBlur","updateStatus","autoFocus","type","onDoubleClick","profile","className","s","src","photos","small","DefaultAvatar","alt","aboutMe","fullName","message","likeCounts","MyPosts","this","addPost","PostsElements","posts","map","p","likesCount","id","FormPostRedux","onSubmit","values","postBody","React","validationMaxLength","maxLengthCreator","reduxForm","form","handleSubmit","Field","component","Textarea","name","validate","requiredField","MyPostsContainerRR","connect","state","profilePage","dispatch","newPostText","addPostAC","PageProfileContainer","userID","navigation","params","authorizedUserid","getUserProfile","getStatusThunk","updateStatusThunk","compose","isAuthRedirectHoc","isAuth","auth","WrapperComponent","location","useLocation","useParams"],"sourceRoot":""}